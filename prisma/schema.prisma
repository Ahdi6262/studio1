// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String?           @unique
  emailVerified    DateTime?
  image            String? // Avatar URL
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  profile          Profile?
  blogPosts        BlogPost[]
  leaderboardEntry LeaderboardEntry?
  // For Auth (e.g. NextAuth)
  // accounts      Account[]
  // sessions      Session[]
}

// For NextAuth.js if added later
// model Account {
//   id                String  @id @default(cuid())
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? @db.Text
//   access_token      String? @db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.Text
//   session_state     String?
//   user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime
//   @@unique([identifier, token])
// }

model Profile {
  id           String   @id @default(cuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio          String?  @db.Text
  achievements String[] // Array of strings for achievement names
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Project {
  id              String    @id @default(cuid())
  title           String
  description     String    @db.Text
  longDescription String?   @db.Text
  imageUrl        String
  tags            String[]
  technologies    String[]
  liveLink        String?
  repoLink        String?
  date            DateTime? // Or String if precise date isn't always available
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  // Add relation to User if projects are user-specific
  // userId          String?
  // user            User?    @relation(fields: [userId], references: [id])
}

model Course {
  id           String      @id @default(cuid())
  title        String
  description  String      @db.Text
  imageUrl     String
  authorName   String // Display name for course author/creator
  rating       Float?
  studentCount Int?
  price        String? // Could be Int or Decimal if needs calculation
  category     String?
  level        CourseLevel?
  duration     String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  lessons      Lesson[]
  instructorId String?
  instructor   Instructor? @relation(fields: [instructorId], references: [id])
}

model Lesson {
  id        String   @id @default(cuid())
  title     String
  duration  String // e.g., "30m", "2h"
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Instructor {
  id        String   @id @default(cuid())
  name      String
  bio       String?  @db.Text
  avatarUrl String?
  courses   Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlogPost {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  summary     String   @db.Text
  content     String?  @db.Text
  imageUrl    String
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  publishedAt DateTime
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model LeaderboardEntry {
  id        String   @id @default(cuid())
  userId    String   @unique // Each user has one entry
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  points    Int
  // Achievements are on the Profile model to avoid duplication
  // rank can be calculated dynamically based on points
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CourseLevel {
  Beginner
  Intermediate
  Advanced
}
